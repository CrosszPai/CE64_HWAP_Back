version: "3.9"  # optional since v1.27.0
services:
  traefik:
    image: "traefik:v2.5"
    container_name: "traefik"
    ports:
      - "443:443"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - ./acme.json:/etc/traefik/acme.json
    command:
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      - --providers.docker=true
      - --providers.docker.exposedByDefault=false
      - --api=true
      - --api.dashboard=true
      - --certificatesresolvers.let.acme.email=${CERT_EMAIL}
      - --certificatesResolvers.let.acme.tlsChallenge=true
      - --certificatesresolvers.let.acme.storage=/etc/traefik/acme.json

    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN_NAME}`)' # Put in your domain
      - 'traefik.http.routers.traefik.entrypoints=websecure'
      - 'traefik.http.routers.traefik.tls.certresolver=let'
      - 'traefik.http.routers.traefik.service=api@internal'
      - 'traefik.http.services.api@internal.loadbalancer.server.port=8080' # Required in swarms, https://doc.traefik.io/traefik/v2.0/routing/providers/docker/#services
      - 'traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto = https'
      # - 'traefik.http.routers.traefik.middlewares=traefik-auth'
      # - 'traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_USER_PASS}'
    env_file: 
      - .env
  graphql:
    build: 
      context: .
      dockerfile: Dockerfile
    env_file: 
      - .env
    environment: 
      - NODE_ENV=production
    command: sh -c './wait-for.sh db:5432 -- npm run start'
    ports:
      - "3001:3001" # server port
    labels:
      - traefik.enable=true
      - traefik.http.routers.graphql.rule=Host(`api.${DOMAIN_NAME}`)
      - traefik.http.routers.graphql.tls=true
      - traefik.http.services.graphql.loadbalancer.server.port=3001
      - traefik.http.routers.graphql.entrypoints=websecure
      - traefik.http.routers.graphql.tls.certresolver=let
  redis:
    image: redis:6.2.5-alpine
  db:
    image: postgres:13.4-alpine
    env_file: 
      - .env
    volumes:
      - data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  master:
    image: chrislusf/seaweedfs # use a remote image
    ports:
      - 9333:9333
      - 19333:19333
    command: "master -ip=master"
  volume:
    image: chrislusf/seaweedfs # use a remote image
    ports:
      - 8081:8081
      - 18080:18080
      - 9325:9325
    command: 'volume -mserver="master:9333" -port=8081  -metricsPort=9325'
    depends_on:
      - master
  filer:
    image: chrislusf/seaweedfs # use a remote image
    ports:
      - 8888:8888
      - 18888:18888
      - 9326:9326
    command: 'filer -master="master:9333"  -metricsPort=9326'
    tty: true
    stdin_open: true
    depends_on:
      - master
      - volume
    labels:
      - traefik.enable=true
      - traefik.http.routers.filer.rule=Host(`filer.${DOMAIN_NAME}`)&&Method(`GET`)&&Path(`/{sub:.*\.*$$}`)
      - traefik.http.routers.filer.tls=true
      - traefik.http.services.filer.loadbalancer.server.port=8888
      - traefik.http.routers.filer.entrypoints=websecure
      - traefik.http.routers.filer.tls.certresolver=let
  cronjob:
    image: chrislusf/seaweedfs # use a remote image
    command: "cronjob"
    environment:
      # Run re-replication every 2 minutes
      CRON_SCHEDULE: "*/2 * * * * *" # Default: '*/5 * * * * *'
      WEED_MASTER: master:9333 # Default: localhost:9333
    depends_on:
      - master
      - volume

volumes:
  data: